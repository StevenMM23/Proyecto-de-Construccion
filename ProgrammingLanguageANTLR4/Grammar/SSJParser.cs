//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/omar.nunez/Downloads/Proyecto-de-Construccion/ProgrammingLanguageANTLR4/Grammar/SSJ.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SSJParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, PARENTESIS_DERECHO=11, VARIABLE=12, PARENTESIS_IZQUIERDO=13, 
		COMILLAS=14, LLAVE_IZ=15, LLAVE_DR=16, IGUAL=17, OPERADOR_RELACIONAL=18, 
		OPERADOR_ARITMETICO=19, NUMERO=20, STRING=21, TEXTO=22, WS=23;
	public const int
		RULE_program = 0, RULE_mostrar = 1, RULE_declaration = 2, RULE_postDeclaration = 3, 
		RULE_arithmeticOperations = 4, RULE_showCommand = 5, RULE_conditionalCommand = 6, 
		RULE_ifCommand = 7, RULE_ifConditional = 8, RULE_loopCommand = 9, RULE_conditionalLoop = 10, 
		RULE_operationLoop = 11, RULE_elseBlock = 12, RULE_block = 13, RULE_type = 14;
	public static readonly string[] ruleNames = {
		"program", "mostrar", "declaration", "postDeclaration", "arithmeticOperations", 
		"showCommand", "conditionalCommand", "ifCommand", "ifConditional", "loopCommand", 
		"conditionalLoop", "operationLoop", "elseBlock", "block", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'show'", "'if'", "'&&'", "'||'", "'for'", "';'", "'while'", "'else'", 
		"'int'", "'string'", "')'", null, "'('", "'\"'", "'{'", "'}'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "PARENTESIS_DERECHO", 
		"VARIABLE", "PARENTESIS_IZQUIERDO", "COMILLAS", "LLAVE_IZ", "LLAVE_DR", 
		"IGUAL", "OPERADOR_RELACIONAL", "OPERADOR_ARITMETICO", "NUMERO", "STRING", 
		"TEXTO", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SSJ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SSJParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SSJParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SSJParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SSJParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 30;
				mostrar();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MostrarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandContext showCommand() {
			return GetRuleContext<ShowCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalCommandContext conditionalCommand() {
			return GetRuleContext<ConditionalCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDeclarationContext postDeclaration() {
			return GetRuleContext<PostDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopCommandContext loopCommand() {
			return GetRuleContext<LoopCommandContext>(0);
		}
		public MostrarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mostrar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMostrar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MostrarContext mostrar() {
		MostrarContext _localctx = new MostrarContext(Context, State);
		EnterRule(_localctx, 2, RULE_mostrar);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				showCommand();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				conditionalCommand();
				}
				break;
			case T__8:
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				declaration();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				postDeclaration();
				}
				break;
			case T__4:
			case T__6:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42;
				loopCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(SSJParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext[] arithmeticOperations() {
			return GetRuleContexts<ArithmeticOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext arithmeticOperations(int i) {
			return GetRuleContext<ArithmeticOperationsContext>(i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			type();
			State = 46;
			Match(VARIABLE);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGUAL) {
				{
				State = 47;
				Match(IGUAL);
				State = 48;
				Match(VARIABLE);
				}
			}

			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPERADOR_ARITMETICO) {
				{
				{
				State = 51;
				arithmeticOperations();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(SSJParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext[] arithmeticOperations() {
			return GetRuleContexts<ArithmeticOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext arithmeticOperations(int i) {
			return GetRuleContext<ArithmeticOperationsContext>(i);
		}
		public PostDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDeclarationContext postDeclaration() {
		PostDeclarationContext _localctx = new PostDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_postDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(VARIABLE);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGUAL) {
				{
				State = 58;
				Match(IGUAL);
				State = 59;
				Match(VARIABLE);
				}
			}

			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPERADOR_ARITMETICO) {
				{
				{
				State = 62;
				arithmeticOperations();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_ARITMETICO() { return GetToken(SSJParser.OPERADOR_ARITMETICO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SSJParser.VARIABLE, 0); }
		public ArithmeticOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperationsContext arithmeticOperations() {
		ArithmeticOperationsContext _localctx = new ArithmeticOperationsContext(Context, State);
		EnterRule(_localctx, 8, RULE_arithmeticOperations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 68;
			Match(OPERADOR_ARITMETICO);
			State = 69;
			Match(VARIABLE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SSJParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		public ShowCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandContext showCommand() {
		ShowCommandContext _localctx = new ShowCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_showCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__0);
			State = 72;
			Match(PARENTESIS_IZQUIERDO);
			State = 73;
			Match(VARIABLE);
			State = 74;
			Match(PARENTESIS_DERECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public ConditionalCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalCommandContext conditionalCommand() {
		ConditionalCommandContext _localctx = new ConditionalCommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_conditionalCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ifCommand();
			State = 77;
			block();
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 78;
				elseBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionalContext[] ifConditional() {
			return GetRuleContexts<IfConditionalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionalContext ifConditional(int i) {
			return GetRuleContext<IfConditionalContext>(i);
		}
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(T__1);
			State = 82;
			Match(PARENTESIS_IZQUIERDO);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VARIABLE) {
				{
				{
				State = 83;
				ifConditional();
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || _la==T__3) {
					{
					State = 84;
					_la = TokenStream.LA(1);
					if ( !(_la==T__2 || _la==T__3) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(PARENTESIS_DERECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionalContext : ParserRuleContext {
		public IfConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditional; } }
	 
		public IfConditionalContext() { }
		public virtual void CopyFrom(IfConditionalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AritmeticoIfContext : IfConditionalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext[] arithmeticOperations() {
			return GetRuleContexts<ArithmeticOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext arithmeticOperations(int i) {
			return GetRuleContext<ArithmeticOperationsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL() { return GetToken(SSJParser.OPERADOR_RELACIONAL, 0); }
		public AritmeticoIfContext(IfConditionalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritmeticoIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalIfContext : IfConditionalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL() { return GetToken(SSJParser.OPERADOR_RELACIONAL, 0); }
		public RelationalIfContext(IfConditionalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionalContext ifConditional() {
		IfConditionalContext _localctx = new IfConditionalContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifConditional);
		int _la;
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new RelationalIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				Match(VARIABLE);
				State = 95;
				Match(OPERADOR_RELACIONAL);
				State = 96;
				Match(VARIABLE);
				}
				break;
			case 2:
				_localctx = new AritmeticoIfContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				Match(VARIABLE);
				State = 98;
				arithmeticOperations();
				State = 99;
				Match(OPERADOR_RELACIONAL);
				State = 100;
				Match(VARIABLE);
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPERADOR_ARITMETICO) {
					{
					State = 101;
					arithmeticOperations();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopCommandContext : ParserRuleContext {
		public LoopCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopCommand; } }
	 
		public LoopCommandContext() { }
		public virtual void CopyFrom(LoopCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForContext : LoopCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalLoopContext conditionalLoop() {
			return GetRuleContext<ConditionalLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationLoopContext operationLoop() {
			return GetRuleContext<OperationLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZ() { return GetToken(SSJParser.LLAVE_IZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DR() { return GetToken(SSJParser.LLAVE_DR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDeclarationContext postDeclaration() {
			return GetRuleContext<PostDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public ForContext(LoopCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : LoopCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalLoopContext conditionalLoop() {
			return GetRuleContext<ConditionalLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZ() { return GetToken(SSJParser.LLAVE_IZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DR() { return GetToken(SSJParser.LLAVE_DR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public WhileContext(LoopCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopCommandContext loopCommand() {
		LoopCommandContext _localctx = new LoopCommandContext(Context, State);
		EnterRule(_localctx, 18, RULE_loopCommand);
		int _la;
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				_localctx = new ForContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				Match(T__4);
				State = 107;
				Match(PARENTESIS_IZQUIERDO);
				State = 110;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__8:
				case T__9:
					{
					State = 108;
					declaration();
					}
					break;
				case VARIABLE:
					{
					State = 109;
					postDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 112;
				Match(T__5);
				State = 113;
				conditionalLoop();
				State = 114;
				Match(T__5);
				State = 115;
				operationLoop();
				State = 116;
				Match(PARENTESIS_DERECHO);
				State = 117;
				Match(LLAVE_IZ);
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
					{
					{
					State = 118;
					mostrar();
					}
					}
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 124;
				Match(LLAVE_DR);
				}
				break;
			case T__6:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				Match(T__6);
				State = 127;
				Match(PARENTESIS_IZQUIERDO);
				State = 128;
				conditionalLoop();
				State = 129;
				Match(PARENTESIS_DERECHO);
				State = 130;
				Match(LLAVE_IZ);
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
					{
					{
					State = 131;
					mostrar();
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 137;
				Match(LLAVE_DR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalLoopContext : ParserRuleContext {
		public ConditionalLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalLoop; } }
	 
		public ConditionalLoopContext() { }
		public virtual void CopyFrom(ConditionalLoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AritmeticoLoopContext : ConditionalLoopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL() { return GetToken(SSJParser.OPERADOR_RELACIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext[] arithmeticOperations() {
			return GetRuleContexts<ArithmeticOperationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperationsContext arithmeticOperations(int i) {
			return GetRuleContext<ArithmeticOperationsContext>(i);
		}
		public AritmeticoLoopContext(ConditionalLoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAritmeticoLoop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalLoopContext : ConditionalLoopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL() { return GetToken(SSJParser.OPERADOR_RELACIONAL, 0); }
		public RelationalLoopContext(ConditionalLoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalLoopContext conditionalLoop() {
		ConditionalLoopContext _localctx = new ConditionalLoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_conditionalLoop);
		int _la;
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new RelationalLoopContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				Match(VARIABLE);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPERADOR_RELACIONAL) {
					{
					State = 142;
					Match(OPERADOR_RELACIONAL);
					State = 143;
					Match(VARIABLE);
					}
				}

				}
				break;
			case 2:
				_localctx = new AritmeticoLoopContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(VARIABLE);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPERADOR_ARITMETICO) {
					{
					{
					State = 147;
					arithmeticOperations();
					}
					}
					State = 152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 153;
				Match(OPERADOR_RELACIONAL);
				State = 154;
				Match(VARIABLE);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPERADOR_ARITMETICO) {
					{
					{
					State = 155;
					arithmeticOperations();
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERADOR_ARITMETICO() { return GetTokens(SSJParser.OPERADOR_ARITMETICO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_ARITMETICO(int i) {
			return GetToken(SSJParser.OPERADOR_ARITMETICO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(SSJParser.IGUAL, 0); }
		public OperationLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationLoopContext operationLoop() {
		OperationLoopContext _localctx = new OperationLoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_operationLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(VARIABLE);
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPERADOR_ARITMETICO) {
					{
					{
					State = 164;
					Match(OPERADOR_ARITMETICO);
					}
					}
					State = 169;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 170;
				Match(OPERADOR_ARITMETICO);
				State = 171;
				Match(IGUAL);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 172;
					Match(VARIABLE);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(T__7);
			State = 178;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZ() { return GetToken(SSJParser.LLAVE_IZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DR() { return GetToken(SSJParser.LLAVE_DR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(LLAVE_IZ);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 181;
				mostrar();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187;
			Match(LLAVE_DR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\xC2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\a', '\x2', '\"', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '%', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x34', 
		'\n', '\x4', '\x3', '\x4', '\a', '\x4', '\x37', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', ':', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '?', '\n', '\x5', '\x3', '\x5', '\a', '\x5', '\x42', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '\x45', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'R', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'X', '\n', '\t', '\a', '\t', 'Z', '\n', '\t', '\f', '\t', '\xE', 
		'\t', ']', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 'i', '\n', '\n', '\x5', '\n', 'k', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'q', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', 'z', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'}', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x87', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x8A', '\v', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x8E', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x93', '\n', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\x97', '\n', '\f', '\f', '\f', '\xE', '\f', '\x9A', '\v', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x9F', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\xA2', '\v', '\f', '\x5', '\f', '\xA4', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xA8', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xAB', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xB0', '\n', '\r', '\x5', '\r', '\xB2', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xB9', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xBC', '\v', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x2', '\x2', '\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', 
		'\x4', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '\v', '\f', '\x2', '\xCC', 
		'\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '/', '\x3', '\x2', '\x2', '\x2', '\b', ';', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x46', '\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'N', '\x3', '\x2', '\x2', '\x2', '\x10', 'S', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'j', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', '\x4', '\x3', '\x2', 
		'!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', 
		'\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '&', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\a', '\x2', '\x2', '\x3', '\'', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '(', '.', '\x5', '\f', '\a', '\x2', ')', '.', '\x5', '\xE', 
		'\b', '\x2', '*', '.', '\x5', '\x6', '\x4', '\x2', '+', '.', '\x5', '\b', 
		'\x5', '\x2', ',', '.', '\x5', '\x14', '\v', '\x2', '-', '(', '\x3', '\x2', 
		'\x2', '\x2', '-', ')', '\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x5', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x5', 
		'\x1E', '\x10', '\x2', '\x30', '\x33', '\a', '\xE', '\x2', '\x2', '\x31', 
		'\x32', '\a', '\x13', '\x2', '\x2', '\x32', '\x34', '\a', '\xE', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x38', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x37', '\x5', '\n', '\x6', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\a', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		';', '>', '\a', '\xE', '\x2', '\x2', '<', '=', '\a', '\x13', '\x2', '\x2', 
		'=', '?', '\a', '\xE', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x42', '\x5', '\n', '\x6', '\x2', '\x41', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\t', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\a', '\x15', '\x2', '\x2', 'G', 'H', '\a', 
		'\xE', '\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'J', 
		'\a', '\x3', '\x2', '\x2', 'J', 'K', '\a', '\xF', '\x2', '\x2', 'K', 'L', 
		'\a', '\xE', '\x2', '\x2', 'L', 'M', '\a', '\r', '\x2', '\x2', 'M', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x10', '\t', '\x2', 'O', 
		'Q', '\x5', '\x1C', '\xF', '\x2', 'P', 'R', '\x5', '\x1A', '\xE', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', '\xF', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x4', '\x2', 
		'\x2', 'T', '[', '\a', '\xF', '\x2', '\x2', 'U', 'W', '\x5', '\x12', '\n', 
		'\x2', 'V', 'X', '\t', '\x2', '\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'U', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', 
		'\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\a', '\r', '\x2', '\x2', '_', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\xE', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\x14', '\x2', '\x2', '\x62', 'k', '\a', '\xE', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\xE', '\x2', '\x2', '\x64', '\x65', '\x5', '\n', 
		'\x6', '\x2', '\x65', '\x66', '\a', '\x14', '\x2', '\x2', '\x66', 'h', 
		'\a', '\xE', '\x2', '\x2', 'g', 'i', '\x5', '\n', '\x6', '\x2', 'h', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 
		'k', '\x3', '\x2', '\x2', '\x2', 'j', '`', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x63', '\x3', '\x2', '\x2', '\x2', 'k', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', '\a', '\x2', '\x2', 'm', 'p', '\a', '\xF', '\x2', 
		'\x2', 'n', 'q', '\x5', '\x6', '\x4', '\x2', 'o', 'q', '\x5', '\b', '\x5', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\b', '\x2', 
		'\x2', 's', 't', '\x5', '\x16', '\f', '\x2', 't', 'u', '\a', '\b', '\x2', 
		'\x2', 'u', 'v', '\x5', '\x18', '\r', '\x2', 'v', 'w', '\a', '\r', '\x2', 
		'\x2', 'w', '{', '\a', '\x11', '\x2', '\x2', 'x', 'z', '\x5', '\x4', '\x3', 
		'\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', 
		'\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\a', '\x12', '\x2', '\x2', '\x7F', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\t', '\x2', '\x2', '\x81', 
		'\x82', '\a', '\xF', '\x2', '\x2', '\x82', '\x83', '\x5', '\x16', '\f', 
		'\x2', '\x83', '\x84', '\a', '\r', '\x2', '\x2', '\x84', '\x88', '\a', 
		'\x11', '\x2', '\x2', '\x85', '\x87', '\x5', '\x4', '\x3', '\x2', '\x86', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x12', '\x2', 
		'\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x80', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\a', '\xE', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\x14', '\x2', '\x2', '\x91', '\x93', '\a', 
		'\xE', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x98', '\a', '\xE', '\x2', '\x2', '\x95', '\x97', '\x5', 
		'\n', '\x6', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '\x14', '\x2', '\x2', '\x9C', '\xA0', '\a', '\xE', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '\n', '\x6', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\x8F', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xB1', '\a', '\xE', '\x2', '\x2', '\xA6', '\xA8', '\a', 
		'\x15', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\a', '\x15', '\x2', '\x2', '\xAD', '\xAF', '\a', '\x13', '\x2', 
		'\x2', '\xAE', '\xB0', '\a', '\xE', '\x2', '\x2', '\xAF', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\n', '\x2', '\x2', '\xB4', 
		'\xB5', '\x5', '\x1C', '\xF', '\x2', '\xB5', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xBA', '\a', '\x11', '\x2', '\x2', '\xB7', '\xB9', '\x5', 
		'\x4', '\x3', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\x12', '\x2', '\x2', '\xBE', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\t', '\x3', '\x2', '\x2', '\xC0', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '#', '-', '\x33', '\x38', '>', '\x43', 'Q', 
		'W', '[', 'h', 'j', 'p', '{', '\x88', '\x8D', '\x92', '\x98', '\xA0', 
		'\xA3', '\xA9', '\xAF', '\xB1', '\xBA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
