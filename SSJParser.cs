//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\estev\Desktop\Proyecto de Construccion\SSJ.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SSJParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, PARENTESIS_DERECHO=2, PARENTESIS_IZQUIERDO=3, COMILLAS=4, LLAVE_IZ=5, 
		LLAVE_DR=6, NUMERO=7, TEXTO=8, WS=9;
	public const int
		RULE_program = 0, RULE_mostrar = 1, RULE_showCommand = 2, RULE_showString = 3, 
		RULE_showInt = 4, RULE_showVariables = 5;
	public static readonly string[] ruleNames = {
		"program", "mostrar", "showCommand", "showString", "showInt", "showVariables"
	};

	private static readonly string[] _LiteralNames = {
		null, "'show'", "')'", "'('", "'\"'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "PARENTESIS_DERECHO", "PARENTESIS_IZQUIERDO", "COMILLAS", 
		"LLAVE_IZ", "LLAVE_DR", "NUMERO", "TEXTO", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SSJ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SSJParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SSJParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SSJParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar() {
			return GetRuleContext<MostrarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SSJParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			mostrar();
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MostrarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandContext showCommand() {
			return GetRuleContext<ShowCommandContext>(0);
		}
		public MostrarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mostrar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMostrar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MostrarContext mostrar() {
		MostrarContext _localctx = new MostrarContext(Context, State);
		EnterRule(_localctx, 2, RULE_mostrar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			showCommand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowStringContext showString() {
			return GetRuleContext<ShowStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowIntContext showInt() {
			return GetRuleContext<ShowIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowVariablesContext showVariables() {
			return GetRuleContext<ShowVariablesContext>(0);
		}
		public ShowCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandContext showCommand() {
		ShowCommandContext _localctx = new ShowCommandContext(Context, State);
		EnterRule(_localctx, 4, RULE_showCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			Match(T__0);
			State = 18;
			Match(PARENTESIS_IZQUIERDO);
			State = 22;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMILLAS:
				{
				State = 19;
				showString();
				}
				break;
			case NUMERO:
				{
				State = 20;
				showInt();
				}
				break;
			case TEXTO:
				{
				State = 21;
				showVariables();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 24;
			Match(PARENTESIS_DERECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMILLAS() { return GetTokens(SSJParser.COMILLAS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMILLAS(int i) {
			return GetToken(SSJParser.COMILLAS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXTO() { return GetTokens(SSJParser.TEXTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO(int i) {
			return GetToken(SSJParser.TEXTO, i);
		}
		public ShowStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStringContext showString() {
		ShowStringContext _localctx = new ShowStringContext(Context, State);
		EnterRule(_localctx, 6, RULE_showString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			Match(COMILLAS);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXTO) {
				{
				{
				State = 27;
				Match(TEXTO);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33;
			Match(COMILLAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERO() { return GetToken(SSJParser.NUMERO, 0); }
		public ShowIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowIntContext showInt() {
		ShowIntContext _localctx = new ShowIntContext(Context, State);
		EnterRule(_localctx, 8, RULE_showInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(NUMERO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO() { return GetToken(SSJParser.TEXTO, 0); }
		public ShowVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowVariablesContext showVariables() {
		ShowVariablesContext _localctx = new ShowVariablesContext(Context, State);
		EnterRule(_localctx, 10, RULE_showVariables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(TEXTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '*', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x19', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x1F', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\"', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', 
		'\x2', '\x2', '&', '\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x1C', '\x3', '\x2', '\x2', '\x2', '\n', '%', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\'', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', 
		'\x3', '\x2', '\xF', '\x10', '\a', '\x2', '\x2', '\x3', '\x10', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x5', '\x6', '\x4', '\x2', 
		'\x12', '\x5', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\a', '\x3', 
		'\x2', '\x2', '\x14', '\x18', '\a', '\x5', '\x2', '\x2', '\x15', '\x19', 
		'\x5', '\b', '\x5', '\x2', '\x16', '\x19', '\x5', '\n', '\x6', '\x2', 
		'\x17', '\x19', '\x5', '\f', '\a', '\x2', '\x18', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1B', '\a', '\x4', '\x2', '\x2', '\x1B', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', ' ', '\a', '\x6', '\x2', '\x2', '\x1D', '\x1F', 
		'\a', '\n', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\"', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '#', '\x3', '\x2', '\x2', 
		'\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x6', '\x2', 
		'\x2', '$', '\t', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\t', '\x2', 
		'\x2', '&', '\v', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\n', '\x2', 
		'\x2', '(', '\r', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', ' ',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
