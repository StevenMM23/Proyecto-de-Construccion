//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\estev\Desktop\Proyecto de Construccion\SSJ.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SSJParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, PARENTESIS_DERECHO=11, VARIABLE=12, PARENTESIS_IZQUIERDO=13, 
		COMILLAS=14, LLAVE_IZ=15, LLAVE_DR=16, IGUAL=17, OPERADOR_RELACIONAL=18, 
		OPERADOR_ARITMETICO=19, NUMERO=20, STRING=21, TEXTO=22, WS=23;
	public const int
		RULE_program = 0, RULE_mostrar = 1, RULE_declaration = 2, RULE_postDeclaration = 3, 
		RULE_showCommand = 4, RULE_conditionalCommand = 5, RULE_ifCommand = 6, 
		RULE_ifConditional = 7, RULE_loopCommand = 8, RULE_declarationLoop = 9, 
		RULE_conditionalLoop = 10, RULE_operationLoop = 11, RULE_elseBlock = 12, 
		RULE_block = 13, RULE_type = 14;
	public static readonly string[] ruleNames = {
		"program", "mostrar", "declaration", "postDeclaration", "showCommand", 
		"conditionalCommand", "ifCommand", "ifConditional", "loopCommand", "declarationLoop", 
		"conditionalLoop", "operationLoop", "elseBlock", "block", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'show'", "'if'", "'&&'", "'||'", "'for'", "';'", "'while'", "'else'", 
		"'int'", "'string'", "')'", null, "'('", "'\"'", "'{'", "'}'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "PARENTESIS_DERECHO", 
		"VARIABLE", "PARENTESIS_IZQUIERDO", "COMILLAS", "LLAVE_IZ", "LLAVE_DR", 
		"IGUAL", "OPERADOR_RELACIONAL", "OPERADOR_ARITMETICO", "NUMERO", "STRING", 
		"TEXTO", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SSJ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SSJParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SSJParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SSJParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SSJParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 30;
				mostrar();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MostrarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandContext showCommand() {
			return GetRuleContext<ShowCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalCommandContext conditionalCommand() {
			return GetRuleContext<ConditionalCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDeclarationContext postDeclaration() {
			return GetRuleContext<PostDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopCommandContext loopCommand() {
			return GetRuleContext<LoopCommandContext>(0);
		}
		public MostrarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mostrar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMostrar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MostrarContext mostrar() {
		MostrarContext _localctx = new MostrarContext(Context, State);
		EnterRule(_localctx, 2, RULE_mostrar);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				showCommand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				conditionalCommand();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				postDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42;
				loopCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(SSJParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostDeclarationContext postDeclaration() {
			return GetRuleContext<PostDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				type();
				State = 46;
				Match(VARIABLE);
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGUAL) {
					{
					State = 47;
					Match(IGUAL);
					{
					State = 48;
					Match(VARIABLE);
					}
					}
				}

				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				postDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(SSJParser.IGUAL, 0); }
		public PostDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDeclarationContext postDeclaration() {
		PostDeclarationContext _localctx = new PostDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_postDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(VARIABLE);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGUAL) {
				{
				State = 55;
				Match(IGUAL);
				{
				State = 56;
				Match(VARIABLE);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(SSJParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		public ShowCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandContext showCommand() {
		ShowCommandContext _localctx = new ShowCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_showCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(T__0);
			State = 60;
			Match(PARENTESIS_IZQUIERDO);
			State = 61;
			Match(VARIABLE);
			State = 62;
			Match(PARENTESIS_DERECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public ConditionalCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalCommandContext conditionalCommand() {
		ConditionalCommandContext _localctx = new ConditionalCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_conditionalCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ifCommand();
			State = 65;
			block();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 66;
				elseBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionalContext[] ifConditional() {
			return GetRuleContexts<IfConditionalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionalContext ifConditional(int i) {
			return GetRuleContext<IfConditionalContext>(i);
		}
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(T__1);
			State = 70;
			Match(PARENTESIS_IZQUIERDO);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VARIABLE) {
				{
				{
				State = 71;
				ifConditional();
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || _la==T__3) {
					{
					State = 72;
					_la = TokenStream.LA(1);
					if ( !(_la==T__2 || _la==T__3) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			Match(PARENTESIS_DERECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL() { return GetToken(SSJParser.OPERADOR_RELACIONAL, 0); }
		public IfConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionalContext ifConditional() {
		IfConditionalContext _localctx = new IfConditionalContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifConditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 82;
			Match(VARIABLE);
			State = 83;
			Match(OPERADOR_RELACIONAL);
			State = 84;
			Match(VARIABLE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalLoopContext conditionalLoop() {
			return GetRuleContext<ConditionalLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationLoopContext operationLoop() {
			return GetRuleContext<OperationLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZ() { return GetToken(SSJParser.LLAVE_IZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DR() { return GetToken(SSJParser.LLAVE_DR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationLoopContext declarationLoop() {
			return GetRuleContext<DeclarationLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDeclarationContext postDeclaration() {
			return GetRuleContext<PostDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public LoopCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopCommandContext loopCommand() {
		LoopCommandContext _localctx = new LoopCommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_loopCommand);
		int _la;
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(T__4);
				State = 87;
				Match(PARENTESIS_IZQUIERDO);
				State = 90;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 88;
					declarationLoop();
					}
					break;
				case 2:
					{
					State = 89;
					postDeclaration();
					}
					break;
				}
				State = 92;
				Match(T__5);
				State = 93;
				conditionalLoop();
				State = 94;
				Match(T__5);
				State = 95;
				operationLoop();
				State = 96;
				Match(PARENTESIS_DERECHO);
				State = 97;
				Match(LLAVE_IZ);
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
					{
					{
					State = 98;
					mostrar();
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 104;
				Match(LLAVE_DR);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106;
				Match(T__6);
				State = 107;
				Match(PARENTESIS_IZQUIERDO);
				State = 108;
				conditionalLoop();
				State = 109;
				Match(PARENTESIS_DERECHO);
				State = 110;
				Match(LLAVE_IZ);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
					{
					{
					State = 111;
					mostrar();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 117;
				Match(LLAVE_DR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostDeclarationContext postDeclaration() {
			return GetRuleContext<PostDeclarationContext>(0);
		}
		public DeclarationLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationLoopContext declarationLoop() {
		DeclarationLoopContext _localctx = new DeclarationLoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_declarationLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 121;
				declaration();
				}
				break;
			case 2:
				{
				State = 122;
				postDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL() { return GetToken(SSJParser.OPERADOR_RELACIONAL, 0); }
		public ConditionalLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalLoopContext conditionalLoop() {
		ConditionalLoopContext _localctx = new ConditionalLoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_conditionalLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(VARIABLE);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERADOR_RELACIONAL) {
				{
				State = 126;
				Match(OPERADOR_RELACIONAL);
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE) {
				{
				State = 129;
				Match(VARIABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VARIABLE() { return GetTokens(SSJParser.VARIABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE(int i) {
			return GetToken(SSJParser.VARIABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERADOR_ARITMETICO() { return GetTokens(SSJParser.OPERADOR_ARITMETICO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_ARITMETICO(int i) {
			return GetToken(SSJParser.OPERADOR_ARITMETICO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(SSJParser.IGUAL, 0); }
		public OperationLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationLoopContext operationLoop() {
		OperationLoopContext _localctx = new OperationLoopContext(Context, State);
		EnterRule(_localctx, 22, RULE_operationLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(VARIABLE);
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPERADOR_ARITMETICO) {
					{
					{
					State = 133;
					Match(OPERADOR_ARITMETICO);
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 139;
				Match(OPERADOR_ARITMETICO);
				State = 140;
				Match(IGUAL);
				}
				break;
			}
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE) {
				{
				State = 143;
				Match(VARIABLE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__7);
			State = 147;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZ() { return GetToken(SSJParser.LLAVE_IZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DR() { return GetToken(SSJParser.LLAVE_DR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(LLAVE_IZ);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << T__9) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 150;
				mostrar();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(LLAVE_DR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\xA3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\a', '\x2', '\"', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '%', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x34', 
		'\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x37', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '<', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x46', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'L', '\n', '\b', '\a', '\b', 
		'N', '\n', '\b', '\f', '\b', '\xE', '\b', 'Q', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', ']', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x66', '\n', '\n', '\f', '\n', '\xE', 
		'\n', 'i', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 's', '\n', 
		'\n', '\f', '\n', '\xE', '\n', 'v', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'z', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '~', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x82', '\n', '\f', 
		'\x3', '\f', '\x5', '\f', '\x85', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x89', '\n', '\r', '\f', '\r', '\xE', '\r', '\x8C', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x90', '\n', '\r', '\x3', 
		'\r', '\x5', '\r', '\x93', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x9A', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\x9D', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x2', '\x2', '\x11', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', '\x2', '\x4', '\x3', '\x2', '\x5', '\x6', 
		'\x3', '\x2', '\v', '\f', '\x2', '\xA9', '\x2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '-', '\x3', '\x2', '\x2', '\x2', '\x6', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x38', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x42', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x10', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'y', '\x3', '\x2', '\x2', '\x2', '\x14', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x18', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x94', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x5', '\x4', '\x3', '\x2', '!', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x3', 
		'\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\a', '\x2', '\x2', '\x3', '\'', '\x3', '\x3', '\x2', '\x2', '\x2', '(', 
		'.', '\x5', '\n', '\x6', '\x2', ')', '.', '\x5', '\f', '\a', '\x2', '*', 
		'.', '\x5', '\x6', '\x4', '\x2', '+', '.', '\x5', '\b', '\x5', '\x2', 
		',', '.', '\x5', '\x12', '\n', '\x2', '-', '(', '\x3', '\x2', '\x2', '\x2', 
		'-', ')', '\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x5', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x5', '\x1E', '\x10', 
		'\x2', '\x30', '\x33', '\a', '\xE', '\x2', '\x2', '\x31', '\x32', '\a', 
		'\x13', '\x2', '\x2', '\x32', '\x34', '\a', '\xE', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\x5', 
		'\b', '\x5', '\x2', '\x36', '/', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x38', ';', '\a', '\xE', '\x2', '\x2', '\x39', ':', '\a', '\x13', '\x2', 
		'\x2', ':', '<', '\a', '\xE', '\x2', '\x2', ';', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\t', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\a', '\x3', '\x2', '\x2', '>', '?', '\a', 
		'\xF', '\x2', '\x2', '?', '@', '\a', '\xE', '\x2', '\x2', '@', '\x41', 
		'\a', '\r', '\x2', '\x2', '\x41', '\v', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x5', '\xE', '\b', '\x2', '\x43', '\x45', '\x5', '\x1C', '\xF', 
		'\x2', '\x44', '\x46', '\x5', '\x1A', '\xE', '\x2', '\x45', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x4', '\x2', '\x2', 
		'H', 'O', '\a', '\xF', '\x2', '\x2', 'I', 'K', '\x5', '\x10', '\t', '\x2', 
		'J', 'L', '\t', '\x2', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 
		'M', 'I', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\r', '\x2', '\x2', 'S', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\a', '\xE', '\x2', '\x2', 'U', 'V', '\a', '\x14', '\x2', '\x2', 
		'V', 'W', '\a', '\xE', '\x2', '\x2', 'W', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\a', '\a', '\x2', '\x2', 'Y', '\\', '\a', '\xF', '\x2', 
		'\x2', 'Z', ']', '\x5', '\x14', '\v', '\x2', '[', ']', '\x5', '\b', '\x5', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '\b', 
		'\x2', '\x2', '_', '`', '\x5', '\x16', '\f', '\x2', '`', '\x61', '\a', 
		'\b', '\x2', '\x2', '\x61', '\x62', '\x5', '\x18', '\r', '\x2', '\x62', 
		'\x63', '\a', '\r', '\x2', '\x2', '\x63', 'g', '\a', '\x11', '\x2', '\x2', 
		'\x64', '\x66', '\x5', '\x4', '\x3', '\x2', '\x65', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', 
		'\x12', '\x2', '\x2', 'k', 'z', '\x3', '\x2', '\x2', '\x2', 'l', 'm', 
		'\a', '\t', '\x2', '\x2', 'm', 'n', '\a', '\xF', '\x2', '\x2', 'n', 'o', 
		'\x5', '\x16', '\f', '\x2', 'o', 'p', '\a', '\r', '\x2', '\x2', 'p', 't', 
		'\a', '\x11', '\x2', '\x2', 'q', 's', '\x5', '\x4', '\x3', '\x2', 'r', 
		'q', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\a', '\x12', '\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 
		'y', 'X', '\x3', '\x2', '\x2', '\x2', 'y', 'l', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x13', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x5', '\x6', '\x4', 
		'\x2', '|', '~', '\x5', '\b', '\x5', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x81', '\a', '\xE', '\x2', '\x2', '\x80', '\x82', 
		'\a', '\x14', '\x2', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x85', '\a', '\xE', '\x2', '\x2', '\x84', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x17', '\x3', '\x2', '\x2', '\x2', '\x86', '\x8F', '\a', '\xE', 
		'\x2', '\x2', '\x87', '\x89', '\a', '\x15', '\x2', '\x2', '\x88', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x15', '\x2', '\x2', 
		'\x8E', '\x90', '\a', '\x13', '\x2', '\x2', '\x8F', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x93', '\a', '\xE', '\x2', '\x2', 
		'\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x19', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\a', '\n', '\x2', '\x2', '\x95', '\x96', '\x5', '\x1C', '\xF', '\x2', 
		'\x96', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9B', '\a', '\x11', 
		'\x2', '\x2', '\x98', '\x9A', '\x5', '\x4', '\x3', '\x2', '\x99', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x12', '\x2', '\x2', 
		'\x9F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\t', '\x3', 
		'\x2', '\x2', '\xA1', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x15', '#', 
		'-', '\x33', '\x36', ';', '\x45', 'K', 'O', '\\', 'g', 't', 'y', '}', 
		'\x81', '\x84', '\x8A', '\x8F', '\x92', '\x9B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
