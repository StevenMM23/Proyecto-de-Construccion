//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\estev\Desktop\Proyecto de Construccion\SSJ.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class SSJParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, PARENTESIS_DERECHO=6, PARENTESIS_IZQUIERDO=7, 
		COMILLAS=8, LLAVE_IZ=9, LLAVE_DR=10, IGUAL=11, OPERADOR_RELACIONAL=12, 
		NUMERO=13, STRING=14, TEXTO=15, WS=16;
	public const int
		RULE_program = 0, RULE_mostrar = 1, RULE_declaration = 2, RULE_showCommand = 3, 
		RULE_conditionalCommand = 4, RULE_ifCommand = 5, RULE_elseBlock = 6, RULE_block = 7, 
		RULE_expression = 8, RULE_factor = 9, RULE_type = 10;
	public static readonly string[] ruleNames = {
		"program", "mostrar", "declaration", "showCommand", "conditionalCommand", 
		"ifCommand", "elseBlock", "block", "expression", "factor", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'show'", "'if'", "'else'", "'int'", "'string'", "')'", "'('", "'\"'", 
		"'{'", "'}'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "PARENTESIS_DERECHO", "PARENTESIS_IZQUIERDO", 
		"COMILLAS", "LLAVE_IZ", "LLAVE_DR", "IGUAL", "OPERADOR_RELACIONAL", "NUMERO", 
		"STRING", "TEXTO", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SSJ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SSJParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SSJParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SSJParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SSJParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22;
				mostrar();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4))) != 0) );
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MostrarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandContext showCommand() {
			return GetRuleContext<ShowCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalCommandContext conditionalCommand() {
			return GetRuleContext<ConditionalCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public MostrarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mostrar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMostrar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MostrarContext mostrar() {
		MostrarContext _localctx = new MostrarContext(Context, State);
		EnterRule(_localctx, 2, RULE_mostrar);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				showCommand();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				conditionalCommand();
				}
				break;
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 31;
				declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO() { return GetToken(SSJParser.TEXTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGUAL() { return GetToken(SSJParser.IGUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SSJParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERO() { return GetToken(SSJParser.NUMERO, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			type();
			State = 35;
			Match(TEXTO);
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGUAL) {
				{
				State = 36;
				Match(IGUAL);
				State = 37;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMERO || _la==STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO() { return GetToken(SSJParser.TEXTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERO() { return GetToken(SSJParser.NUMERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SSJParser.STRING, 0); }
		public ShowCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandContext showCommand() {
		ShowCommandContext _localctx = new ShowCommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_showCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(T__0);
			State = 41;
			Match(PARENTESIS_IZQUIERDO);
			State = 42;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMERO) | (1L << STRING) | (1L << TEXTO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 43;
			Match(PARENTESIS_DERECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfCommandContext ifCommand() {
			return GetRuleContext<IfCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public ConditionalCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalCommandContext conditionalCommand() {
		ConditionalCommandContext _localctx = new ConditionalCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_conditionalCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ifCommand();
			State = 46;
			block();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 47;
				elseBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		public IfCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfCommandContext ifCommand() {
		IfCommandContext _localctx = new IfCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__1);
			State = 51;
			Match(PARENTESIS_IZQUIERDO);
			State = 52;
			expression();
			State = 53;
			Match(PARENTESIS_DERECHO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(T__2);
			State = 56;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_IZ() { return GetToken(SSJParser.LLAVE_IZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLAVE_DR() { return GetToken(SSJParser.LLAVE_DR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext[] mostrar() {
			return GetRuleContexts<MostrarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MostrarContext mostrar(int i) {
			return GetRuleContext<MostrarContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(LLAVE_IZ);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4))) != 0)) {
				{
				{
				State = 59;
				mostrar();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			Match(LLAVE_DR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERADOR_RELACIONAL() { return GetTokens(SSJParser.OPERADOR_RELACIONAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL(int i) {
			return GetToken(SSJParser.OPERADOR_RELACIONAL, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			factor();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPERADOR_RELACIONAL) {
				{
				{
				State = 68;
				Match(OPERADOR_RELACIONAL);
				State = 69;
				factor();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_IZQUIERDO() { return GetToken(SSJParser.PARENTESIS_IZQUIERDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENTESIS_DERECHO() { return GetToken(SSJParser.PARENTESIS_DERECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXTO() { return GetTokens(SSJParser.TEXTO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO(int i) {
			return GetToken(SSJParser.TEXTO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERADOR_RELACIONAL() { return GetToken(SSJParser.OPERADOR_RELACIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SSJParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERO() { return GetToken(SSJParser.NUMERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 18, RULE_factor);
		int _la;
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARENTESIS_IZQUIERDO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				Match(PARENTESIS_IZQUIERDO);
				State = 76;
				expression();
				State = 77;
				Match(PARENTESIS_DERECHO);
				}
				break;
			case TEXTO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				Match(TEXTO);
				State = 80;
				Match(OPERADOR_RELACIONAL);
				State = 81;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMERO) | (1L << STRING) | (1L << TEXTO))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case NUMERO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				Match(NUMERO);
				State = 83;
				Match(OPERADOR_RELACIONAL);
				State = 84;
				factor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISSJVisitor<TResult> typedVisitor = visitor as ISSJVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', '\\', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x6', '\x2', '\x1A', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '#', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ')', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x33', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '?', '\n', '\t', '\f', '\t', '\xE', '\t', '\x42', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'I', '\n', '\n', '\f', '\n', '\xE', '\n', 'L', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'X', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x5', '\x3', '\x2', '\xF', '\x10', '\x3', '\x2', '\xF', 
		'\x11', '\x3', '\x2', '\x6', '\a', '\x2', 'Y', '\x2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '$', '\x3', 
		'\x2', '\x2', '\x2', '\b', '*', '\x3', '\x2', '\x2', '\x2', '\n', '/', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x39', '\x3', '\x2', '\x2', '\x2', '\x10', '<', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x45', '\x3', '\x2', '\x2', '\x2', '\x14', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\x16', 'Y', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x1A', '\x5', '\x4', '\x3', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x2', '\x2', 
		'\x3', '\x1E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1F', '#', '\x5', 
		'\b', '\x5', '\x2', ' ', '#', '\x5', '\n', '\x6', '\x2', '!', '#', '\x5', 
		'\x6', '\x4', '\x2', '\"', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '#', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x5', '\x16', '\f', '\x2', 
		'%', '(', '\a', '\x11', '\x2', '\x2', '&', '\'', '\a', '\r', '\x2', '\x2', 
		'\'', ')', '\t', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\x3', '\x2', '\x2', '\x2', ')', '\a', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\a', '\x3', '\x2', '\x2', '+', ',', '\a', '\t', '\x2', 
		'\x2', ',', '-', '\t', '\x3', '\x2', '\x2', '-', '.', '\a', '\b', '\x2', 
		'\x2', '.', '\t', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x5', '\f', 
		'\a', '\x2', '\x30', '\x32', '\x5', '\x10', '\t', '\x2', '\x31', '\x33', 
		'\x5', '\xE', '\b', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\x4', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\t', '\x2', '\x2', '\x36', '\x37', '\x5', '\x12', '\n', '\x2', 
		'\x37', '\x38', '\a', '\b', '\x2', '\x2', '\x38', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\a', '\x5', '\x2', '\x2', ':', ';', '\x5', 
		'\x10', '\t', '\x2', ';', '\xF', '\x3', '\x2', '\x2', '\x2', '<', '@', 
		'\a', '\v', '\x2', '\x2', '=', '?', '\x5', '\x4', '\x3', '\x2', '>', '=', 
		'\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', 
		'>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x44', '\a', '\f', '\x2', '\x2', '\x44', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x45', 'J', '\x5', '\x14', '\v', '\x2', '\x46', 
		'G', '\a', '\xE', '\x2', '\x2', 'G', 'I', '\x5', '\x14', '\v', '\x2', 
		'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', '\x13', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\a', '\t', '\x2', '\x2', 'N', 'O', '\x5', '\x12', 
		'\n', '\x2', 'O', 'P', '\a', '\b', '\x2', '\x2', 'P', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x11', '\x2', '\x2', 'R', 'S', '\a', '\xE', 
		'\x2', '\x2', 'S', 'X', '\t', '\x3', '\x2', '\x2', 'T', 'U', '\a', '\xF', 
		'\x2', '\x2', 'U', 'V', '\a', '\xE', '\x2', '\x2', 'V', 'X', '\x5', '\x14', 
		'\v', '\x2', 'W', 'M', '\x3', '\x2', '\x2', '\x2', 'W', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 'X', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'Z', '\t', '\x4', '\x2', '\x2', 'Z', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x1B', '\"', '(', '\x32', '@', 'J', 
		'W',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
